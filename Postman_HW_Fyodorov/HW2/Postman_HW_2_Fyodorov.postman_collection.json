{
	"info": {
		"_postman_id": "6b837600-9e97-4292-a2ed-b7f5b564e158",
		"name": "Postman_HW_2_Fyodorov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"var res = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name(ручками)\", function () {\r",
							"    pm.expect(res.name).to.eql(\"Kirill\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age(ручками)\", function () {\r",
							"    pm.expect(res.age).to.eql(\"22\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary(ручками)\", function () {\r",
							"    pm.expect(res.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Сheck name(с реквеста)\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age(с реквеста)\", function () {\r",
							"    pm.expect(res.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary(с реквеста)\", function () {\r",
							"    var req_salary = Number(req.salary)\r",
							"    pm.expect(res.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(res.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"U_salary_1_5_year equal salary*4\", function () {\r",
							"    pm.expect(res.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kirill",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"var res = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//console.log(req)\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name(с реквеста)\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age(с реквеста)\", function () {\r",
							"    pm.expect(res.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary(с реквеста)\", function () {\r",
							"    var req_salary = Number(req.salary);\r",
							"    pm.expect(res.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(res.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog object contains 'name'\", function () {\r",
							"    pm.expect(res.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog object contains 'age'\", function () {\r",
							"    pm.expect(res.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(res.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(res.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kirill&age=22&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kirill"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var res = pm.response.json();\r",
							"var req = pm.request.url.query.toObject();\r",
							"var req_age = Number(req.age);\r",
							"var req_salary = Number(req.salary);\r",
							"//console.log(req)\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"    var res = pm.response.json();\r",
							"    //console.log(res)\r",
							"\r",
							"//4. Спарсить request.\r",
							"    var req = pm.request.url.query.toObject();\r",
							"    //console.log(req)\r",
							"    \r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"Check name(с реквеста)\", function(){\r",
							"        pm.expect(res.name).to.equal(req.name);\r",
							"    });\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    pm.test(\"Check age(с реквеста)\", function(){\r",
							"        pm.expect(res.age).to.equal(req_age);\r",
							"    });\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"    //console.log(req.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"    //console.log(res.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"   //console.log(res.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"   //console.log(res.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"   //console.log(res.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(\"Check_salary_fromRes_equal_salary_fromReq\", function(){\r",
							"        pm.expect(res.salary[0]).to.equal(req_salary);\r",
							"    })\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(\"Check_salary_fromRes_equal_salary*2_fromReq\", function(){\r",
							"        pm.expect(res.salary[1]).to.equal(String(req.salary*2));\r",
							"    })\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    pm.test(\"Check_salary_fromRes_equal_salary*3_fromReq\", function(){\r",
							"        pm.expect(res.salary[2]).to.equal(String(req.salary*3))\r",
							"    })\r",
							"//15. Создать в окружении переменную name\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"    postman.setEnvironmentVariable(\"name\", res.name);\r",
							"//19. Передать в окружение переменную age\r",
							"    postman.setEnvironmentVariable(\"age\", res.age)\r",
							"//20. Передать в окружение переменную salary\r",
							"    postman.setEnvironmentVariable(\"salary\", res.salary[0])\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    for (i=0; i<3; i++){\r",
							"        console.log(Number(res.salary[i]));\r",
							"    }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kirill&age=22&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kirill"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let res = pm.response.json();\r",
							"\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"let schema8 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"start_qa_salary\"]\r",
							"}\r",
							"\r",
							"pm.test(\"Response body contains 'start_qa_salary'\", function () {\r",
							"    //pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"    //pm.expect(res).to.have.property(\"start_qa_salary\")\r",
							"    pm.expect(tv4.validate(res,schema8)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"let schema9 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"qa_salary_after_6_months\"]\r",
							"}\r",
							"pm.test(\"Response body contains 'qa_salary_after_6_months'\", function(){\r",
							"    //pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\")\r",
							"    pm.expect(res).to.have.property(\"qa_salary_after_6_months\")\r",
							"    //pm.expect(tv4.validate(res,schema9)).to.be.true;\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"let schema10 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"qa_salary_after_12_months\"]\r",
							"}\r",
							"pm.test(\"Response body contains 'qa_salary_after_12_months'\", function(){\r",
							"    //pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\")\r",
							"    //pm.expect(res).to.have.property(\"qa_salary_after_12_months\")\r",
							"    pm.expect(tv4.validate(res,schema10)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"let schema11 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"qa_salary_after_1.5_year\"]\r",
							"}\r",
							"pm.test(\"Response body contains 'qa_salary_after_1.5_year'\", function(){\r",
							"    //pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\")\r",
							"    //pm.expect(res).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    //pm.expect(tv4.validate(res,schema11)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"let schema12 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"qa_salary_after_3.5_years\"]\r",
							"}\r",
							"pm.test(\"Response body contains 'qa_salary_after_3.5_years'\", function(){\r",
							"    //pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\")\r",
							"    //pm.expect(res).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    pm.expect(tv4.validate(res,schema12)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"let schema13 = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\":[\"person\"]\r",
							"}\r",
							"pm.test(\"Response body contains 'person'\", function(){\r",
							"    //pm.expect(pm.response.text()).to.include(\"person\")\r",
							"    //pm.expect(res).to.have.property(\"person\")\r",
							"    pm.expect(tv4.validate(res,schema13)).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary_equal_req.salary\", function(){\r",
							"    pm.expect(res.start_qa_salary).to.equal(Number(req.salary))\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months_equal_req.salary*2\", function(){\r",
							"    pm.expect(res.qa_salary_after_6_months).to.equal(Number(req.salary*2))\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months_equal_req.salary*2.7\", function(){\r",
							"    pm.expect(res.qa_salary_after_12_months).to.equal(Number(req.salary*2.7))\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year_equal_req.salary*3.3\", function(){\r",
							"    pm.expect(res[\"qa_salary_after_1.5_year\"]).to.equal(Number(req.salary*3.3))\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years_equal_req.salary*3.8\", function(){\r",
							"    pm.expect(res[\"qa_salary_after_3.5_years\"]).to.equal(Number(req.salary*3.8))\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1]_equal_req.salary\", function(){\r",
							"    pm.expect(res.person.u_name[1]).to.equal(Number(req.salary))\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age_equal_req.age\", function(){\r",
							"    pm.expect(res.person.u_age).to.equal(Number(req.age))\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years_equal_req.salary*4.2\", function(){\r",
							"    pm.expect(res.person.u_salary_5_years).to.equal(req.salary*4.2)\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i = 0; i < 3; i++) {\r",
							"    console.log(res.person.u_name[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		}
	]
}